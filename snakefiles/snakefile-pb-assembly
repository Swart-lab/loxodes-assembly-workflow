import os.path

def get_pb_ccs_by_sp(sp):
    outfiles = []
    for lib in expand(config['libraries_by_sp'][sp]['pb-ccs']):
        outfiles.extend(expand(config['pb_raw'][lib]['ccs']))
    return(outfiles)

rule flye_comb_ccs:
    # Combined assembly for each species, using all metagenomic libraries available for that species
    input:
        lambda wildcards: get_pb_ccs_by_sp(wildcards.sp)
    output:
        assembly=protected("assembly/flye-comb_{sp}/assembly.fasta"),
        gfa=protected("assembly/flye-comb_{sp}/assembly_graph.gfa"),
        gv=protected("assembly/flye-comb_{sp}/assembly_graph.gv"),
        assembly_info=protected("assembly/flye-comb_{sp}/assembly_info.txt"),
        scaffolds="assembly/flye-comb_{sp}/scaffolds.fasta" # alias for consistency
    threads: 16
    conda: "envs/flye.yml"
    params:
        prefix="assembly/flye-comb_{sp}"
    log: "logs/flye_comb_ccs.{sp}.log"
    shell:
        "flye --threads {threads} --pacbio-hifi -o {params.prefix} {input} &> {log};"
        "ln -sr {output.assembly} {output.scaffolds}" # -r relative link, else rule breaks

rule link_flye_assem_output:
    input:
        assembly="assembly/flye-comb_{sp}/assembly.fasta",
        gfa="assembly/flye-comb_{sp}/assembly_graph.gfa",
        gv="assembly/flye-comb_{sp}/assembly_graph.gv",
        assembly_info="assembly/flye-comb_{sp}/assembly_info.txt"
    output:
        assembly="assembly/latest/flye-comb_{sp}.assembly.fasta",
        gfa="assembly/latest/flye-comb_{sp}.assembly_graph.gfa",
        gv="assembly/latest/flye-comb_{sp}.assembly_graph.gv",
        assembly_info="assembly/latest/flye-comb_{sp}.assembly_info.txt"
    shell:
        "ln -sr {input.assembly} {output.assembly};"
        "ln -sr {input.gfa} {output.gfa};"
        "ln -sr {input.gv} {output.gv};"
        "ln -sr {input.assembly_info} {output.assembly_info}"

rule gbtquick_flye_comb:
    input:
        scaffolds="assembly/flye-comb_{sp}/assembly.fasta",
        assembly_info="assembly/flye-comb_{sp}/assembly_info.txt",
        prodigal_gff="annotation/flye-comb_{sp}/flye-comb_{sp}.prodigal.gff"
    conda: "envs/gbtquick.yml"
    log: "logs/gbtquick_flye_comb.{sp}.log"
    output:
        covstats="annotation/flye-comb_{sp}/flye-comb_{sp}.gbtquick.covstats.tsv",
        blobplot="annotation/flye-comb_{sp}/flye-comb_{sp}.gbtquick.blobplot.png"
    params:
        prefix="annotation/flye-comb_{sp}/flye-comb_{sp}.gbtquick"
    shell:
        "opt/gbtquick/gbtquick.py -a flye -f {input.scaffolds} -i {input.assembly_info} -o {params.prefix} --plot --plot_fmt png --prodigal_gff {input.prodigal_gff} &> {log}"

# Common to both Falcon and Flye assemblies

rule minimap_pb_ccs_assembly:
    input:
        scaffolds="assembly/{assembler}-comb_{spref}/scaffolds.fasta",
        reads=lambda wildcards: get_pb_ccs_by_sp(wildcards.spmap)
    conda: "envs/minimap2.yml"
    log:
        minimap="logs/minimap_ccs_{assembler}-comb.{spmap}.{spref}.minimap2.log"
    threads: 24
    output:
        bam="annotation/{assembler}-comb_{spref}/mapping/minimap2.{spmap}_pb-ccs_vs_{assembler}-comb_{spref}.bam"
    shell:
        # multiple input reads can be supplied to minimap
        # not documented; see https://github.com/lh3/minimap2/issues/191
        "minimap2 --MD -t {threads} -ax asm20 {input.scaffolds} {input.reads} 2> {log.minimap} | samtools view -b --reference {input.scaffolds} > {output.bam} ;"

rule sort_minimap_pb_ccs_assembly:
    input:
        scaffolds="assembly/{assembler}-comb_{spref}/scaffolds.fasta",
        bam="annotation/{assembler}-comb_{spref}/mapping/minimap2.{spmap}_pb-ccs_vs_{assembler}-comb_{spref}.bam"
    output:
        sortbam=protected("annotation/{assembler}-comb_{spref}/mapping/minimap2.{spmap}_pb-ccs_vs_{assembler}-comb_{spref}.sort.bam"),
        index=protected("annotation/{assembler}-comb_{spref}/mapping/minimap2.{spmap}_pb-ccs_vs_{assembler}-comb_{spref}.sort.bam.bai")
    conda: "envs/minimap2.yml"
    threads: 8
    log:
        sort="logs/sort_minimap_ccs_{assembler}-comb.{spmap}.{spref}.sort.log",
        index="logs/sort_minimap_ccs_{assembler}-comb.{spmap}.{spref}.index.log"
    shell:
        "samtools sort --threads {threads} --reference {input.scaffolds} -o {output.sortbam} {input.bam} 2> {log.sort};"
        "samtools index {output.sortbam} 2> {log.index};"

rule contig_gc_length:
    input:
        scaffolds="assembly/{assembler}-comb_{spref}/scaffolds.fasta",
    output:
        # tmp1=temp("annotation/{assembler}-comb_{spref}/tmp1"),
        # tmp2=temp("annotation/{assembler}-comb_{spref}/tmp2"),
        gcstatsorig="annotation/{assembler}-comb_{spref}/{assembler}-comb_{spref}.gcstatsorig",
        gcstats="annotation/{assembler}-comb_{spref}/{assembler}-comb_{spref}.gcstats",
        ctgbed="annotation/{assembler}-comb_{spref}/{assembler}-comb_{spref}.ctg.bed"
    conda: "envs/bbmap.yml"
    shell:
        "stats.sh in={input.scaffolds} gc={output.gcstatsorig} gcformat=4;"
        # "tail -n+2 {output.gcstatsorig} | cut -f1 -d\" \" > {output.tmp1};" # remove scaffold header attributes after ID
        # "tail -n+2 {output.gcstatsorig} | cut -f2,3 > {output.tmp2};"
        # "paste {output.tmp1} {output.tmp2} > {output.gcstats};"
        "tail -n+2 {output.gcstatsorig} | perl -lne 'print \"$1\\t$2\\t$3\" if m/^(\S+)[^\\t]*\\t(\S+)\\t(\S+)/' > {output.gcstats}"
        "cat {output.gcstats} | perl -lane 'print \"$F[0]\\t0\\t$F[1]\"' > {output.ctgbed};"

rule contig_bedcov:
    input:
        sortbam="annotation/{assembler}-comb_{spref}/mapping/minimap2.{spref}_pb-ccs_vs_{assembler}-comb_{spref}.sort.bam",
        ctgbed="annotation/{assembler}-comb_{spref}/{assembler}-comb_{spref}.ctg.bed"
    conda: "envs/gbtquick.yml"
    output:
        "annotation/{assembler}-comb_{spref}/{assembler}-comb_{spref}.minimap2.bedcov"
    shell:
        "samtools bedcov {input.ctgbed} {input.sortbam} > {output};"

rule split_fasta_for_trf:
    # Split scaffolds into smaller chunks for running TRF
    input: "assembly/{assembler}-comb_{sp}/scaffolds.fasta"
    output:
        expand(temp("annotation/{{assembler}}-comb_{{sp}}/trf/split_fasta/trf{num}.fa"),
               num=[str(i).zfill(3) for i in range(100)])
    params:
        prefix="annotation/{assembler}-comb_{sp}/trf/split_fasta/trf"
    shell:
        "/ebio/abt2_projects/ag-swart-loxodes/opt/kentutils/faSplit sequence {input} 100 {params.prefix}"

rule run_trf:
    # Find low complexity tandem repeats
    input: "annotation/{assembler}-comb_{sp}/trf/split_fasta/trf{num}.fa"
    output: temp("annotation/{assembler}-comb_{sp}/trf/trf_out/trf{num}.trf.dat")
    shell:
        "/ebio/abt2_projects/ag-swart-loxodes/envs/repeats/bin/trf {input} 2 5 7 80 10 50 2000 -d -h -ngs > {output}"

rule concat_trf_output:
    # Combine split output
    input: 
        expand("annotation/{{assembler}}-comb_{{sp}}/trf/trf_out/trf{num}.trf.dat",
               num=[str(i).zfill(3) for i in range(100)])
    output: "annotation/{assembler}-comb_{sp}/trf/{assembler}-comb_{sp}.trf.ngs.dat"
    shell:
        "cat {input} > {output}"

rule filter_trf_output:
    input:
        scaffolds="assembly/{assembler}-comb_{sp}/scaffolds.fasta",
        trf_raw="annotation/{assembler}-comb_{sp}/trf/{assembler}-comb_{sp}.trf.ngs.dat"
    output:
        gff="annotation/{assembler}-comb_{sp}/trf/{assembler}-comb_{sp}.trf.no_overlap.min{minlen}.gff3",
        maskfasta="annotation/{assembler}-comb_{sp}/trf/{assembler}-comb_{sp}.trf.no_overlap.min{minlen}.mask.fasta",
        mergebed="annotation/{assembler}-comb_{sp}/trf/{assembler}-comb_{sp}.trf.no_overlap.min{minlen}.merge.bed"
    conda: "envs/barrnap.yml"
    shell:
#       # Repeat features at least minlen bp long
        "/ebio/abt2_projects/ag-swart-loxodes/opt/trf_utils/trf_utils.py --input {input.trf_raw} --no_overlaps --min_length {wildcards.minlen} --outfmt gff --out {output.gff};"
#       # Merge overlapping features and produce masked reference assembly
        "bedtools maskfasta -fi {input.scaffolds} -bed {output.gff} -soft -fo {output.maskfasta};"
        "bedtools merge -i {output.gff} > {output.mergebed};"

# Prepare files for Falcon assembly

rule combine_pb_fq:
    # Combine reads from multiple runs belonging to the same libraries
    input:
        lambda wildcards: config['pb_raw'][wildcards.lib]['ccs']
    output:
        "data/pb-combine/{lib}.fastq.gz",
    conda: "envs/bbmap.yml"
    threads: 8
    params:
        # Allocate at least one thread to pigz, otherwise one fewer than total
        pigzthreads=lambda wildcards, threads: threads - 1 if (threads > 1) else 1
    shell:
        "gzip -cd {input} | pigz -p {params.pigzthreads} -c > {output};"

rule reformat_fastq_fasta:
    # Reformat to Fasta format, needed by Falcon
    input: "data/pb-combine/{lib}.fastq.gz"
    output: "data/pb-combine/{lib}.fasta"
    threads: 8
    conda: "envs/bbmap.yml"
    shell:
        "reformat.sh threads={threads} in={input} out={output}"

rule make_fofn:
    # Make FOFN file required by Falcon
    output: "assembly/falcon-comb_{sp}/falcon-comb_{sp}.fofn"
    input:
        lambda wildcards: expand("data/pb-combine/{lib}.fasta", lib=config['libraries_by_sp'][wildcards.sp]['pb-ccs'])
    run:
        with open(output[0], 'w') as fh:
            for i in input:
                fh.write(str(os.path.abspath(i)))
                fh.write("\n")

# Actual Falcon assembly is not under Snakemake workflow control because 
# there are several manual intervention steps required
