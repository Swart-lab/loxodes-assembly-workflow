# Rules for preprocessing and QC of transcriptomic RNAseq reads

PHYLOFLASH_DBHOME="db/phyloFlash/132"

rule combine_reads_rnaseq:
    # Combine read files of several runs from the same library into single file
    input:
        fwd=lambda wildcards: config['reads_rnaseq_raw'][wildcards.lib]['fwd'],
        rev=lambda wildcards: config['reads_rnaseq_raw'][wildcards.lib]['rev']
    output:
        fwd="data/reads-rnaseq-combine/{lib}_R1.fq.gz",
        rev="data/reads-rnaseq-combine/{lib}_R2.fq.gz"
    conda: "envs/bbmap.yml"
    threads: 8
    params:
        # Allocate at least one thread to pigz, otherwise one fewer than total
        pigzthreads=lambda wildcards, threads: threads - 1 if (threads > 1) else 1
    shell:
        "gzip -cd {input.fwd} | pigz -p {params.pigzthreads} -c > {output.fwd};"
        "gzip -cd {input.rev} | pigz -p {params.pigzthreads} -c > {output.rev};"

rule bbduk_qtrim_ktrim_rnaseq:
    # Adapter kmer-trim and quality trim reads
    input:
        fwd="data/reads-rnaseq-combine/{lib}_R1.fq.gz",
        rev="data/reads-rnaseq-combine/{lib}_R2.fq.gz"
    output:
        "data/reads-rnaseq-trim/{lib}_R12_ktrim_qtrim{qtrimvals}.fq.gz"
    threads: 8
    log: "logs/bbduk_qtrim_ktrim_rnaseq.{lib}_q{qtrimvals}.log"
    conda: "envs/bbmap.yml"
    shell:
        "bbduk.sh -Xmx10g ref=resources/adapters.fa,resources/phix174_ill.ref.fa.gz threads={threads} in={input.fwd} in2={input.rev} ktrim=r qtrim=rl trimq={wildcards.qtrimvals} minlength=25 out={output} 2> {log}"

rule phyloflash_rnaseq:
    # Screen each read library for potential contamination, e.g. from food algae and bacteria
    input:
        fwd="data/reads-rnaseq-combine/{lib}_R1.fq.gz",
        rev="data/reads-rnaseq-combine/{lib}_R2.fq.gz"
    output:
        "qc/phyloFlash_rnaseq/{lib}.phyloFlash.tar.gz"
    threads: 8
    conda: "envs/phyloFlash.yml"
    log: "logs/phyloflash_rnaseq.{lib}.log"
    params:
        db=PHYLOFLASH_DBHOME,
        readlimit=1000000
    shell:
        "phyloFlash.pl -lib {wildcards.lib} -readlength 150 -read1 {input.fwd} -read2 {input.rev} -readlimit {params.readlimit} -CPUs {threads} -almosteverything -dbhome {params.db} 2> {log};"
        "mv {wildcards.lib}.phyloFlash* qc/phyloFlash_rnaseq/;"

rule filter_rnaseq_chlamy:
    # Filter out reads that map to Chlamydomonas food algae, the main eukaryotic contaminant expected
    input: "data/reads-rnaseq-trim/{lib}_R12_ktrim_qtrim{qtrimvals}.fq.gz"
    threads: 8
    conda: "envs/bbmap.yml"
    output:
        outu="data/reads-rnaseq-filter/{lib}_R12_ktrim_qtrim{qtrimvals}_bbmap_nochlamy.R12.fq.gz",
        outm="data/reads-rnaseq-filter/{lib}_R12_ktrim_qtrim{qtrimvals}_bbmap_chlamy.R12.bam",
        scafstats="data/reads-rnaseq-filter/{lib}_R12_ktrim_qtrim{qtrimvals}_bbmap_nochlamy.scafstats"
    log: "logs/filter_rnaseq_chlamy.{lib}.q{qtrimvals}.log"
    params: 
        ref="db/chlamydomonas/Creinhardtii/v5.6/assembly/Creinhardtii_281_v5.0.fa"
    shell:
        "bbmap.sh -Xmx40g nodisk=t minid=0.98 interleaved=t threads={threads} ref={params.ref} in={input} outu={output.outu} outm={output.outm} scafstats={output.scafstats}"

rule split_filter_rnaseq_chlamy_reads:
    # Split interleaved reads, required for subsequent input to Trinity assembler
    input: "data/reads-rnaseq-filter/{lib}_R12_ktrim_qtrim{qtrimvals}_bbmap_nochlamy.R12.fq.gz"
    threads: 8
    conda: "envs/bbmap.yml"
    output:
        readf="data/reads-rnaseq-filter/{lib}_R12_ktrim_qtrim{qtrimvals}_bbmap_nochlamy.R1.fq.gz",
        readr="data/reads-rnaseq-filter/{lib}_R12_ktrim_qtrim{qtrimvals}_bbmap_nochlamy.R2.fq.gz"
    log: "logs/split_filter_rnaseq_chlamy_reads.{lib}.q{qtrimvals}.log"
    shell:
        "reformat.sh -Xmx10g threads={threads} interleaved=t in={input} out={output.readf} out2={output.readr}"

rule hisat_index_assembly:
    # Index genome assembly with Hisat2 for splice-aware alignment of RNAseq reads onto genome
    input: "assembly/{assembler}_{sp}_q{qtrimvals}/scaffolds.fasta"
    output: # Index files for hisat2
        "annotation/{assembler}_{sp}_q{qtrimvals}/mapping/{assembler}_{sp}_q{qtrimvals}.1.ht2"
    params: 
        prefix="annotation/{assembler}_{sp}_q{qtrimvals}/mapping/{assembler}_{sp}_q{qtrimvals}",
        hisatbuildpath="/ebio/abt2_projects/ag-swart-loxodes/opt/hisat2-2.0.0-beta/hisat2-build", # custom build of Hisat2
        seed="12345"
    threads: 4
    log: "logs/hisat_index_assembly.{assembler}_{sp}_q{qtrimvals}.log"
    shell:
        "{params.hisatbuildpath} -f -p {threads} --seed {params.seed} {input} {params.prefix} &> {log}"

rule hisat_rnaseq_map_to_genome:
    # Map RNAseq reads to genomic reference 
    input:
        assembly="assembly/{assembler}_{sp}_q{qtrimvals}/scaffolds.fasta",
        readf="data/reads-rnaseq-filter/{lib}_R12_ktrim_qtrim{qtrimvals}_bbmap_nochlamy.R1.fq.gz",
        readr="data/reads-rnaseq-filter/{lib}_R12_ktrim_qtrim{qtrimvals}_bbmap_nochlamy.R2.fq.gz",
        index1="annotation/{assembler}_{sp}_q{qtrimvals}/mapping/{assembler}_{sp}_q{qtrimvals}.1.ht2"
    output:
        sam=temp("annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.sam"),
        bam=temp("annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.bam"),
        sortbam="annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.sort.bam",
        metfile="annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.met"
    log: "logs/hisat_rnaseq_map_to_genome.hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.log"
    params:
        prefix="annotation/{assembler}_{sp}_q{qtrimvals}/mapping/{assembler}_{sp}_q{qtrimvals}",
        hisatpath="/ebio/abt2_projects/ag-swart-loxodes/opt/hisat2-2.0.0-beta/hisat2",
        seed="12345"
    threads: 8 # 2.5G memory, 4:0:0 run time, 8 threads
    shell:
        "{params.hisatpath} -q --rna-strandness RF --min-intronlen 10 --max-intronlen 50000 --met-file {output.metfile} --threads {threads} --seed {params.seed} -x {params.prefix} -1 {input.readf} -2 {input.readr} -S {output.sam} &> {log};" # Keep unaligned reads so that pairs where only one segment mapped can be extracted later
        "samtools view -b -T {input.assembly} -o {output.bam} -@ 7 {output.sam};"
        "samtools sort -@ 7 -o {output.sortbam} {output.bam};"

rule hisat_rnaseq_mapped_reads_to_fastq:
    # Convert RNAseq that have mapped to genomic reference to Fastq format for assembly
    input:
        sortbam="annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.sort.bam"
    output:
        bampairedmapped=temp("annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.mapped1.bam"),
        bamfwdmapped=temp("annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.mapped2.bam"),
        bamrevmapped=temp("annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.mapped3.bam"),
        bammappedmerge=temp("annotation/{assembler}_{sp}_q{qtrimvals}/mapping/hisat2.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.mapped.merge.bam"),
        readsf="data/reads-rnaseq-genome-mapped/{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.R1.fastq.gz",
        readsr="data/reads-rnaseq-genome-mapped/{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.R2.fastq.gz",
        readsu="data/reads-rnaseq-genome-mapped/{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.U.fastq.gz"
    log: "logs/hisat_rnaseq_mapped_reads_to_fastq.{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}.log"
    conda: "envs/bowtie2.yml"
    threads: 12 # vmem 1G, time 2:0:0, threads 12
    params:
        tmpprefix="/tmp/kbseah/{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}/bam2fastq_",
        tmpdir="/tmp/kbseah/{lib}_q{qtrimvals}_nochlamy.{assembler}_{sp}_q{qtrimvals}"
    shell:
        "samtools view -@ 11 -bh -F 4 -f 8 -o {output.bamfwdmapped} {input.sortbam};" # Reads with fwd segment mapped but not rev
        "samtools view -@ 11 -bh -F 8 -f 4 -o {output.bamrevmapped} {input.sortbam};" # Reads with rev segment mapped but not fwd
        "samtools view -@ 11 -bh -F 12 -o {output.bampairedmapped} {input.sortbam};" # Reads with both segments mapped
        "samtools merge -@ 11 {output.bammappedmerge} {output.bamfwdmapped} {output.bamrevmapped} {output.bampairedmapped};" # Merge filtered BAMs
        "mkdir -p {params.tmpdir};" # Make tmpdir to hold sort files
        # Trinity is fussy about the header formatting of input reads in Fastq files. samtools fastq has to be called with -N option to append /1 /2 to read names in paired end files
        "samtools view -@ 3 -b -u {output.bammappedmerge} | samtools collate -n 128 -u -O -@ 3 - {params.tmpprefix} | samtools fastq -0 /dev/null -1 {output.readsf} -2 {output.readsr} -s {output.readsu} -N -@ 3 -;" # Collate reads by pair and output to Fastq format
