rule plot_bt2_covstats_cdsdens:
    # Blob plot of metagenome assembly using covstats from Bowtie2, colored by CDS density
    input:
        covstats="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.bt2.covstats",
        cdsdens="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.cds-dens.tsv"
    output:
        "annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.bt2.blobplot.png"
    threads: 2
    shell: 
        "Rscript code/blobplot.R --covstats {input.covstats} --cdsdens {input.cdsdens} --out {output}"

rule barrnap:
    # Screen assembly for rRNA genes
    input:
        "assembly/{assembler}_{lib}_q{qtrimvals}/scaffolds.fasta"
    output:
        gff="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.barrnap.{kingdom}.gff",
        fasta="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.barrnap.{kingdom}.fasta"
    conda: "envs/barrnap.yml"
    threads: 4
    log: "logs/barrnap.{assembler}_{lib}_q{qtrimvals}.{kingdom}.log"
    shell:
        "barrnap --kingdom {wildcards.kingdom} --threads {threads} {input} > {output.gff} 2> {log};"
        "bedtools getfasta -fi {input} -bed {output.gff} -fo {output.fasta} 2>> {log}"

rule bandage_rrna_draw:
    # From assembly graph draw contigs connected to identified rRNA sequences
    # to see if bacterial genomes/contigs can be pulled out
    input:
        fastg="assembly/{assembler}_{lib}_q{qtrimvals}/assembly_graph.fastg",
        barrnap_fasta="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.barrnap.{kingdom}.fasta"
    output:
        "annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.barrnap.{kingdom}.Bandage.png"
    conda: "envs/bandage.yml"
    threads: 1
    log: "logs/bandage_rrna_draw.{assembler}_{lib}_q{qtrimvals}.{kingdom}.log"
    shell:
        "Bandage image {input.fastg} {output} --query {input.barrnap_fasta} --scope aroundblast --distance 5 &> {log}"

rule mt_rrna_hmm:
    # Scan for ciliate mt rRNA sequences using custom HMM
    input:
        "assembly/{assembler}_{lib}_q{qtrimvals}/scaffolds.fasta"
    output:
        out="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.{rrnagene}.nhmmer.out",
        tblout="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.{rrnagene}.nhmmer.tblout"
    conda: "envs/barrnap.yml"
    log: "logs/mt_rrna_hmm.{assembler}_{lib}_q{qtrimvals}.{rrnagene}.log"
    params:
        hmm="resources/mt_rRNA_hmm/ciliate_{rrnagene}.hmm"
    threads: 4
    shell:
        "nhmmer --cpu {threads} --tblout {output.tblout} {params.hmm} {input} > {output.out} 2> {log}"

rule prodigal_for_cds_dens:
    input:
        "assembly/{assembly_folder}/scaffolds.fasta"
    output:
        "annotation/{assembly_folder}/{assembly_folder}.prodigal.gff"
    conda: "envs/prodigal.yml"
    threads: 16
    log: "logs/prodigal_for_cds_dens.{assembly_folder}.log"
    shell:
        "cat {input} | parallel --gnu -j {threads} --recstart '>' -N 100 --pipe prodigal -f gff -p meta -g 11 > {output} 2> {log}"

rule bin_cds_dens_gc_loxodes:
    # Bin genome assemblies by coding density < 0.5 and GC < 0.4
    input:
        assembly="assembly/{assembler}_{lib}_q{qtrimvals}/scaffolds.fasta",
        covstats="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.gbtquick.covstats.tsv"
    output:
        "annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.bin_cds50_gc40.fasta"
    log:
        "logs/bin_cds_dens_gc_loxodes.{assembler}_{lib}_q{qtrimvals}.log"
    params:
        prefix="annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.bin_cds50_gc40"
    shell:
        "opt/gbtquick/bin_covstats.py --fasta {input.assembly} --covstats {input.covstats} --max_cds_dens 0.5 --max_gc 0.4 -o {params.prefix} &> {log};"
        "opt/kentutils/faSomeRecords {input.assembly} {params.prefix}.filter.list {output}"

rule filter_assembly_min500:
    # Filter out sequences < 500 bp length in assembly
    input:
        assembly="assembly/{assembler}_{lib}_q{qtrimvals}/scaffolds.fasta"
    output:
        "annotation/{assembler}_{lib}_q{qtrimvals}/{assembler}_{lib}_q{qtrimvals}.min500.fasta"
    shell:
        "opt/kentutils/faFilter -minSize=500 {input.assembly} {output}"
